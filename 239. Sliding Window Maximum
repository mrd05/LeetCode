class Solution {
    public int[] maxSlidingWindow(int[] nums, int k) {
        if(nums.length==0)
            return new int[0];
        
        int res[]=new int[nums.length-k+1];
        
        Deque<Integer> dq = new LinkedList<>();

        for (int i = 0; i < k; i++) {
            if (!dq.isEmpty()) {
                while (!dq.isEmpty() && nums[i] >= nums[dq.peekLast()])
                    dq.removeLast();
            }
            dq.addLast(i);
        }
        for (int i = k; i < nums.length; i++) {
            res[i-k]=nums[dq.peekFirst()];
            while (!dq.isEmpty() && dq.peekFirst() <= i - k)
                dq.removeFirst();
            if (!dq.isEmpty()) {
                while (!dq.isEmpty() && nums[i] >= nums[dq.peekLast()])
                    dq.removeLast();
            }
            dq.addLast(i);
        }
        res[nums.length-k]=nums[dq.peekFirst()];
        
        return res;
    }
}

class Solution {
    public int[] maxSlidingWindow(int[] nums, int k) {
        if(nums.length==0)
            return new int[0];
        
        int res[]=new int[nums.length-k+1];
        
        PriorityQueue<Integer> pq=new PriorityQueue<>(nums.length-k+1, Collections.reverseOrder());
        for(int i=0;i<k-1;i++)
            pq.add(nums[i]);
        for(int i=k-1;i<nums.length;i++)
        {
            pq.add(nums[i]);
            res[i-k+1]=pq.peek();
            pq.remove(nums[i-k+1]);
        }
        
        return res;
    }
}
