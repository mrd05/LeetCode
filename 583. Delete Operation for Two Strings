class Solution {
    public int minDistance(String word1, String word2) {
        
        //return operation(word1,word2,word1.length()-1,word2.length()-1);            
        
        int n=word1.length();
        int m=word2.length();
        
        char c1[]=word1.toCharArray();
        char c2[]=word2.toCharArray();
        
        int dp[][]=new int[n+1][m+1];
        for(int i=0;i<n+1;i++)
            dp[i][0]=i;
        for(int i=0;i<m+1;i++)
            dp[0][i]=i;
        for(int i=1;i<=n;i++)
        {
            for(int j=1;j<=m;j++)
            {
                if(c1[i-1]==c2[j-1])
                    dp[i][j]=dp[i-1][j-1];
                else
                    dp[i][j]=1+Math.min(dp[i-1][j],dp[i][j-1]);
            }
        }
        return dp[n][m];
    }
    
    
    // this is recursion
    static int operation(String word1, String word2,int i,int j)
    {
        if(i<0)
            return j+1;
        if(j<0)
            return i+1;
        
        if(word1.charAt(i)==word2.charAt(j))
            return operation(word1,word2,i-1,j-1);
        else
            return 1+Math.min(operation(word1,word2,i,j-1),operation(word1,word2,i-1,j));
            
    }
}
