/*
// Definition for a Node.
class Node {
    public int val;
    public Node left;
    public Node right;
    public Node next;

    public Node() {}

    public Node(int _val,Node _left,Node _right,Node _next) {
        val = _val;
        left = _left;
        right = _right;
        next = _next;
    }
};
*/
class Solution {
    
    //using recursion
    public Node connect(Node root) {
     
        Node head=null;
        Node prev=null;
        Node cur=root;
        while(cur!=null)
        {
            while(cur!=null)
            {
                if(cur.left!=null)
                {
                    if(prev!=null)
                        prev.next=cur.left;
                    else
                        head=cur.left;
                    prev=cur.left;
                }
                
                if(cur.right!=null)
                {
                    if(prev!=null)
                        prev.next=cur.right;
                    else
                        head=cur.right;
                    prev=cur.right;
                }
                cur=cur.next;
            }
            cur=head;
            head=null;
            prev=null;
        }
        return root;
    }
    
    //using queue
    public Node connect1(Node root) {
        
        if(root==null)
            return null;
            
        Queue<Node> q=new LinkedList<>();
        q.add(root);
        q.add(null);
        while(!q.isEmpty())
        {
            if(q.peek()!=null)
            {
                while(q.peek()!=null)
                {
                    Node n=q.poll();
                    n.next=q.peek();
                    
                    if(n.left!=null)
                        q.add(n.left);
                    if(n.right!=null)
                        q.add(n.right);
                }
                q.add(null);
            }
            q.poll();
        }
        return root;
    }
}
