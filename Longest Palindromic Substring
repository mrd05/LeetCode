class Solution1 {
    public String longestPalindrome(String s) {
        String str = "";
        String tem;
        for (int i = 0; i < s.length(); i++) {
            for (int j = i; j < s.length() + 1; j++) {
                tem = s.substring(i, j);
                if (isPalindrome(tem) && tem.length() > str.length())
                    str = tem;
            }
        }
        return str;
    }
    
    public static boolean isPalindrome(String str) {
		for (int i = 0, j = str.length() - 1; i < j; i++, j--) {
			if (str.charAt(i) != str.charAt(j))
				return false;
		}
		return true;
	}
}

class Solution {
    public String longestPalindrome(String s) {
        if(s.length()==0)
            return s;
		boolean arr[][] = new boolean[s.length()][s.length()];
		for (int i = 0; i < s.length(); i++) {
			arr[i][i] = true;
			if (i + 1 < s.length())
				arr[i][i + 1] = s.charAt(i) == s.charAt(i + 1);
		}
		for (int j = 2; j < s.length(); j++) {
			for (int i = 0; i <= j - 2; i++) {
				arr[i][j] = arr[i + 1][j - 1] && (s.charAt(i) == s.charAt(j));
			}
		}
		int a = 0, b = 0;
		for (int i = 0; i < s.length(); i++) {
			for (int j = i; j < s.length(); j++) {
				if (arr[i][j] && (j - i) > (b - a)) {
					a = i;
					b = j;
				}
			}
		}
		return s.substring(a, b + 1);
    }
}
