class MyQueue {
    
    Stack<Integer> s1,s2;

    /** Initialize your data structure here. */
    public MyQueue() {
        s1=new Stack<>();
        s2=new Stack<>();
    }
    
    /** Push element x to the back of queue. */
    public void push(int x) {
        s1.push(x);
    }
    
    /** Removes the element from in front of queue and returns that element. */
    public int pop() {
        if(!s2.isEmpty())
            return s2.pop();
        if(s1.isEmpty())
            return -1;
        while(!s1.isEmpty())
            s2.push(s1.pop());
        return s2.pop();
    }
    
    /** Get the front element. */
    public int peek() {
       if(!s2.isEmpty())
            return s2.peek();
        if(s1.isEmpty())
            return -1;
        while(!s1.isEmpty())
            s2.push(s1.pop());
        return s2.peek();
    }
    
    /** Returns whether the queue is empty. */
    public boolean empty() {
        return s2.isEmpty()? s1.isEmpty():false;
    }
}

/**
 * Your MyQueue object will be instantiated and called as such:
 * MyQueue obj = new MyQueue();
 * obj.push(x);
 * int param_2 = obj.pop();
 * int param_3 = obj.peek();
 * boolean param_4 = obj.empty();
 */

// Using Single Stack
class MyQueue {
    
    Stack<Integer> st;

    /** Initialize your data structure here. */
    public MyQueue() {
        st=new Stack<>();
    }
    
    /** Push element x to the back of queue. */
    public void push(int x) {
        st.push(x);
    }
    
    /** Removes the element from in front of queue and returns that element. */
    public int pop() {
        if(st.isEmpty())
            return -1;
        else if(st.size()==1)
            return st.pop();
        int x=st.pop();
        int res=pop();
        st.push(x);
        return res;
    }
    
    /** Get the front element. */
    public int peek() {
        if(st.isEmpty())
            return -1;
        else if(st.size()==1)
            return st.peek();
        int x=st.pop();
        int res=peek();
        st.push(x);
        return res;
    }
    
    /** Returns whether the queue is empty. */
    public boolean empty() {
        return st.isEmpty();
    }
}
