/**
 * Definition for singly-linked list.
 * public class ListNode {
 *     int val;
 *     ListNode next;
 *     ListNode(int x) { val = x; }
 * }
 */
 
//merging 2 lists at a time
class Solution {
    
    ListNode merge(ListNode a,ListNode b)
    {
        if(a==null)
            return b;
        if(b==null)
            return a;
        if(a.val<=b.val)
        {
            a.next=merge(a.next,b);
            return a;
        }
        else
        {
            b.next=merge(a,b.next);
            return b;
        }
    }
    
    public ListNode mergeKLists(ListNode[] lists) {
        if(lists.length==0)
            return null;
        
        int last=lists.length-1;
        while(last!=0)
        {
            int i=0,j=last;
            while(i<j)
            {
                lists[i]=merge(lists[i],lists[j]);
                i++;
                j--;
                if(i>=j)
                    last=j;
            }
        }
        
        return lists[0];
    }
}

//Using heap ie priority queue
class Solution {
    
    static class ListNodeComp implements Comparator<ListNode>
    {
        public int compare(ListNode n1,ListNode n2)
        {
            return n1.val-n2.val;
        }
    }
    
    public ListNode mergeKLists(ListNode[] lists) {
        if(lists.length==0)
            return null;
        
        PriorityQueue<ListNode> pq=new PriorityQueue<>(new ListNodeComp());
        for(ListNode n:lists)
        {
            if(n!=null)
                pq.add(n);
        }    
        
        ListNode head=null,last=null,t=null;
        while(!pq.isEmpty())
        {
            t=pq.poll();
            if(head==null)
            {
                head=t;
                last=t;
            }
            else
            {
                last.next=t;
                last=last.next;
            }
            if(t.next!=null)
                pq.add(t.next);
        }
        if(last!=null)
            last.next=null;
        return head;
    }
}
