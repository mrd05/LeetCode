class Solution {
    public List<List<Integer>> combinationSum2(int[] candidates, int target) {
        Arrays.sort(candidates);
        Set<List<Integer>> res = new HashSet<>();
        List<Integer> l = new ArrayList<>();
        comb(candidates, target, res, l, -1, 0);
        return new ArrayList<>(res);
    }
    
    private static void comb(int[] arr, int sum,
			Set<List<Integer>> res, List<Integer> l, int i, int s) {
		if (s == sum) {
			res.add(new ArrayList<>(l));
			return;
		}
		if (s > sum)
			return;
        i++;
        int prev=-1;
		while (i < arr.length && s + arr[i] <= sum) {
			if(prev==arr[i])
            {
                i++;
                continue;
            }
            l.add(arr[i]);
			comb(arr, sum, res, l, i, s + arr[i]);
			l.remove(l.size() - 1);
            prev=arr[i];
			i++;
		}
	}
}
