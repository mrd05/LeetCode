/**
 * Definition for singly-linked list.
 * public class ListNode {
 *     int val;
 *     ListNode next;
 *     ListNode(int x) { val = x; }
 * }
 */
class Solution {
    public ListNode reverseKGroup(ListNode head, int k) {

		if (k == 0)
			return head;
		ListNode cur = head, prev = null, next = null;
		int n = 0;
        
        ListNode nextHead=head;
        while(n<k && nextHead!=null)
        {
            nextHead=nextHead.next;
            n++;
        }
        if(n<k)
            return head;

        n=0;
		while (cur != null && n < k) {
			next = cur.next;
			cur.next = prev;
			prev = cur;
			cur = next;
			n++;
		}
		if (next != null)
			head.next = reverseKGroup(next, k);

		return prev;
	
	}
}

class Solution {
    public ListNode reverseKGroup(ListNode head, int k) {

		if (k == 0)
			return head;
		ListNode cur = head;
		ListNode next, curHead = head, lastHead = null;
		ListNode prev = null;
		boolean flag = true;
		while (cur != null) {
			int n = 0;
			next = cur;
			while (next != null && n < k) {
				next = next.next;
				n++;
			}
			if (n < k)
				break;
			curHead = cur;
			prev = next;
			while (n > 0) {
				next = cur.next;
				cur.next = prev;
				prev = cur;
				cur = next;
				n--;
			}
			if (flag) {
				flag = false;
				head = prev;
			} else {
				lastHead.next = prev;
			}
			lastHead = curHead;
			curHead.next = next;

			cur = next;

		}

		return head;
	}
}

class Solution {
    public ListNode reverseKGroup(ListNode head, int k) {

		
		if (k == 0)
			return head;
		ListNode lastHead = null, nextHead = head, cur = head, prev = null, next, finalHead = head, curHead;
		int n = 0;
		boolean flag = true;
		while (nextHead != null) {
			cur = nextHead;
			curHead = cur;
			n = 0;
			while (n < k && nextHead != null) {
				nextHead = nextHead.next;
				n++;
			}
			if (n < k)
				break;
			prev = nextHead;
			while (cur != nextHead) {
				next = cur.next;
				cur.next = prev;
				prev = cur;
				cur = next;
			}
			if (flag) {
				finalHead = prev;
				flag = false;
			} else {
				lastHead.next = prev;
			}
			lastHead = curHead;
		}

		return finalHead;
	}
}
