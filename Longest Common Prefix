class Solution {
    public String longestCommonPrefix(String[] strs) {
        
        if(strs.length==0)
            return "";
        if(strs.length==1)
            return strs[0];
        
		StringBuilder sb = new StringBuilder();
		Arrays.sort(strs);
		for (int i = 0; i < strs[0].length(); i++) {
			if (strs[0].charAt(i) == strs[strs.length - 1].charAt(i))
				sb.append(strs[0].charAt(i));
			else
				break;
		}

		return sb.toString();
    }
}

class Solution {
    public String longestCommonPrefix(String[] strs) {
		if(strs.length==0)
            return "";
        if(strs.length==1)
            return strs[0];
        
        TrieNode root = new TrieNode();
		for (String st : strs)
			root.insert(st);

		return walkTrie(root);
    }
    
    static class TrieNode {
		public int numberChilds = 0;
		public TrieNode[] childs = new TrieNode[26];
		public boolean end = false;

		public TrieNode() {
			for (int i = 0; i < 26; i++)
				this.childs[i] = null;
		}

		void insert(String s) {
			TrieNode t = this;
			for (char c : s.toCharArray()) {
				if (t.childs[c - 'a'] == null) {
					t.numberChilds++;
					t.childs[c - 'a'] = new TrieNode();
				}
				t = t.childs[c - 'a'];
			}
			t.end = true;
		}
	}

	public static String walkTrie(TrieNode root) {
		StringBuilder sb = new StringBuilder();
		int index;
		while (root.numberChilds == 1 && root.end == false) {
			index = indexOfChild(root.childs);
			sb.append((char) ('a' + index));
			root = root.childs[index];
		}

		return sb.toString();
	}

	private static int indexOfChild(TrieNode[] childs) {
		int index = 0;
		for (int i = 0; i < childs.length; i++)
			if (childs[i] != null) {
				index = i;
				break;
			}

		return index;
	}

}
